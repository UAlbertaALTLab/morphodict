from textwrap import dedent

from .template import render_template
from .settings import APPS, DOCKER_COMPOSE_DIR


def make_yaml(args):
    """Create .yml files from .template files.

    Generating them from a single source prevents both tedium and
    inconsistencies.
    """
    context = {
        "autogeneration_notice": dedent(
            """\
            # WARNING: This file is autogenerated by make-yaml. Changes here
            # will be overwritten. Edit the corresponding .template file
            # instead.
        """
        ).strip(),
        "apps": APPS,
    }

    for path in [
        "docker-compose.yml",
        "docker-compose.staging-override.yml",
        "plays/vars.yml",
    ]:
        filled = render_template(
            (DOCKER_COMPOSE_DIR / (path + ".template")).read_text(), context
        )

        filled = clean_up_whitespace_in_template_output(filled)

        out_file = DOCKER_COMPOSE_DIR / path
        out_file.write_text(filled)

        print(f"Wrote {out_file}")


def clean_up_whitespace_in_template_output(text):
    """Remove some excess whitespace from using Django templates for YAML."""

    ret = []
    for line in text.split("\n"):
        # Truly empty lines are likely intentional, so keep them
        if not line:
            ret.append("")
            continue

        # If the line consists entirely of trailing whitespace, it is likely an
        # artifact of template tag formatting, so drop it.
        line = line.rstrip()
        if not line:
            continue

        ret.append(line)

    text = "\n".join(ret)
    if not text.endswith("\n"):
        text += "\n"
    return text
