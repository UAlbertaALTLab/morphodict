# Generated by Django 4.2.16 on 2024-12-02 19:07

from django.db import migrations
from morphodict.search.types import WordnetEntry
from django.db.models import Q


def migrate_from_linguistinfo(apps, schema_editor):
    RapidWords = apps.get_model("lexicon", "RapidWords")
    WordNetSynset = apps.get_model("lexicon", "WordNetSynset")
    Wordform = apps.get_model("lexicon", "Wordform")

    # For every wordform, collect the semantic domain information in the old
    # format and place it where it belongs.
    wordforms = Wordform.objects.all()
    for wf in wordforms.iterator(chunk_size=2000):
        if not wf.linguist_info:
            continue
        if "rw_indices" in wf.linguist_info:
            if isinstance(wf.linguist_info["rw_indices"], dict):
                rapidwords = {
                    rw for l in wf.linguist_info["rw_indices"].values() for rw in l
                }
            elif isinstance(wf.linguist_info["rw_indices"], list):
                rapidwords = [rw for rw in wf.linguist_info["rw_indices"]]
            else:
                continue
            for rw in rapidwords:
                index = rw.strip()
                try:
                    rapidword = RapidWords.objects.get(index=index)
                except RapidWords.DoesNotExist:
                    # Try flexible search
                    try:
                        try:
                            candidates = [
                                RapidWords.objects.get(
                                    index=".".join(index.split(".")[:-1])
                                )
                            ]
                        except RapidWords.DoesNotExist:
                            query = Q(domain__iexact=wf.linguist_info["rw_domains"][0])
                            for domain in wf.linguist_info["rw_domains"][1:]:
                                query |= Q(domain__iexact=domain)
                            universe = RapidWords.objects.filter(query)
                            candidates = [
                                x for x in universe if index.startswith(x.index)
                            ]
                    except:
                        candidates = []
                    if len(candidates) > 0:
                        candidates.sort(key=lambda x: len(x.index), reverse=True)
                        rapidword = candidates[0]
                    else:
                        print(
                            f"ERROR: Slug {wf.slug} is annotated with nonexistent {index} RW index"
                        )
                if rapidword:
                    wf.rapidwords.add(rapidword)

        if "wn_domains" in wf.linguist_info:
            for wn in wf.linguist_info["wn_domains"]:
                normalized_name = None
                try:
                    normalized_name = str(WordnetEntry(wn.strip()))
                except:
                    # This means that the annotated wordnet does not actually exist in the dataset.
                    # Most likely issue is that entry has a different canonical name, either because:
                    # - canonical POS tag is different (should be "a", "s", "r", "n", "v",
                    #   which stand for ADJ, ADJ_SAT, ADV, NOUN, VERB)
                    # - entry annotated with a non-canonical lemma.  Use the canonical lemma appearing in
                    #   "name" in our wordnet instance site.
                    print(
                        f"ERROR: Slug {wf.slug} is annotated with nonexistent {wn.strip()} WN domain"
                    )
                if normalized_name:
                    synset, _ = WordNetSynset.objects.get_or_create(
                        name=normalized_name
                    )
                    wf.synsets.add(synset)


class Migration(migrations.Migration):

    dependencies = [
        ("lexicon", "0015_auto_20241128_2351"),
    ]

    operations = [migrations.RunPython(migrate_from_linguistinfo)]
