# Generated by Django 4.2.16 on 2024-11-28 23:51

from django.db import migrations
from morphodict.search.types import WordnetEntry


def migrate_semantic_domains(apps, schema_editor):
    RapidWords = apps.get_model("lexicon", "RapidWords")
    WordNetSynset = apps.get_model("lexicon", "WordNetSynset")
    Wordform = apps.get_model("lexicon", "Wordform")

    # For every wordform, collect the semantic domain information in the old
    # format and place it where it belongs.
    wordforms = Wordform.objects.all()
    for wf in wordforms:
        if wf.rw_indices:
            rapidwords = [x.strip() for x in wf.rw_indices.split(";")]
        else:
            rapidwords = []
        if wf.wn_synsets:
            synsets = [x.strip() for x in wf.wn_synsets.split(";")]
        else:
            synsets = []

        for rw in rapidwords:
            try:
                if rw:
                    wf.rapidwords.add(RapidWords.objects.get(index=rw))
            except RapidWords.DoesNotExist:
                print(f"ERROR: wordform {wf.id} ({wf.text}) attempted to add RW {rw}")
        for wn in synsets:
            if wn:
                normalized_entry = str(WordnetEntry(wn))
                wf.synsets.add(
                    WordNetSynset.objects.get_or_create(name=normalized_entry)
                )


class Migration(migrations.Migration):

    dependencies = [
        ("lexicon", "0014_auto_20241128_2341"),
    ]

    operations = [migrations.RunPython(migrate_semantic_domains)]
