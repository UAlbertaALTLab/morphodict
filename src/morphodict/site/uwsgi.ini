# Configuration for uwsgi on production within Docker
[uwsgi]
# Error on startup if there are typos in config setting names:
strict = true

# Application
chdir = /app

# uwsgi runtime
master = true
# TODO: tune these settings according to need using `uwsgitop`
# How I decided the initial settings (2020-03-11):
# 2 * #logical-cores + 1
# altlab-itw has 2 logical cores (ðŸ˜­ðŸ˜­ðŸ˜­)
processes = 5
# This is the number of interpreters that uwsgi juggles WITHIN a single process.
# I have no idea how this affects things.
threads = 2

# Recommended configuration
# See: https://uwsgi-docs.readthedocs.io/en/latest/ThingsToKnow.html
# Shut application down on SIGTERM
# (rather than... restart all the workers?!!!??!?)
die-on-term = true
# Initialize the Python GIL in the workers;  Python threads will not work
# without this, so pre-emptively setting this to true to prevent future
# headaches.
enable-threads = true
# Close the webserver socket on fork/exec'd processes:
close-on-exec = true
# Automatically buffer POST request bodies.
# With post-buffering off, the application MUST read EVERY POST body or else
# the communication protocol could break :/
post-buffering = true


# Hooks
# See: https://uwsgi-docs.readthedocs.io/en/latest/Hooks.html
hook-post-app = print:Application loaded!
# Since 'echo' is evaluated in a shell spawned by the worker, to get the
# worker PID, we get the shell's parent pid: $PPID:
hook-accepting-once = exec:echo uWSGI worker ready to accept requests! pid: $PPID
