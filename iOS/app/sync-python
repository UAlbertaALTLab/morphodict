#!/bin/sh

set -e

PROG="$(basename -- "${0}")"

# Normally this script is called by Xcode, which sets a ton of environment
# variables for all sorts of paths.
if [ -z "${PROJECT_DIR}" ]; then
    PROJECT_DIR="$(dirname -- "${0}")"
fi

SSSTTT="$1"
if [ -z "${SSSTTT}" ]; then
  echo "Must provide SSSTTT" 1>&2
  exit 1
fi

# Where original python code is stored
SRC_DIR="${PROJECT_DIR}/../../src"
# Where to sync it so that a copy ends up inside the iOS app
APP_PYTHON_DIR="${PROJECT_DIR}/app_python"

STYLES_FILE="${SRC_DIR}/${SSSTTT}/collected-static/CreeDictionary/css/styles.css"
if ! [ -f "${STYLES_FILE}" ]; then
    echo "${PROG}: styles file ${STYLES_FILE} not found" 1>&2
    echo "run ‘npx rollup -c && ./${SSSTTT}-manage collectstatic’ first" 1>&2
    exit 1
fi

# rsync’s not quite the right tool for this. A custom tool that handled
# rules like the following would be nice:
#   - read some sort of manifest description
#   - only copy if file exists in git
#   - have a list of extensions:
#       - allowed extensions get copied
#       - blocked extensions get ignored
#       - new, unknown extensions raise an error until marked as
#         allowed/blocked
#   - delete .pyc file if no matching .py

rsync -avv --delete --delete-excluded \
        --exclude='__pycache__' \
        --exclude='.ipynb_checkpoints' \
        --include="/crkeng" `# oops, some CreeDictionary stuff points at crkeng` \
        --include="/${SSSTTT}" \
        --include='/mobile.py' \
        --include='/morphodict' \
        --include='/CreeDictionary' \
        --exclude='/*' \
        --include='**/' \
        --include='*.py' \
        --include='*.tsv' \
        --include='*.html' \
        --include='*.css' \
        --include='*.js' \
        --include='*.svg' \
        --include='*.svg-path' \
        --include='*.png' \
        --include='*.jpg' \
        --include='*.woff' \
        --include='W_aggr_corp_morph_log_freq.txt' \
        --include='corpus_frequency.txt' \
        --include='*.hfstol' \
        --exclude='*' \
        "${SRC_DIR}"/ "${APP_PYTHON_DIR}"

rsync -av "${PROJECT_DIR}"/../fakes/ "${APP_PYTHON_DIR}"/

# byte-compile
python3.9 -m compileall -f -b "${APP_PYTHON_DIR}"
# remove original python files
find "${APP_PYTHON_DIR}" -regex '.*\.py' -delete

